// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"matching-timestamps/domain"
	"sync"
)

type FakePeriodicTaskService struct {
	GetPeriodicTimestampsStub        func(domain.PeriodicTask) ([]string, error)
	getPeriodicTimestampsMutex       sync.RWMutex
	getPeriodicTimestampsArgsForCall []struct {
		arg1 domain.PeriodicTask
	}
	getPeriodicTimestampsReturns struct {
		result1 []string
		result2 error
	}
	getPeriodicTimestampsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePeriodicTaskService) GetPeriodicTimestamps(arg1 domain.PeriodicTask) ([]string, error) {
	fake.getPeriodicTimestampsMutex.Lock()
	ret, specificReturn := fake.getPeriodicTimestampsReturnsOnCall[len(fake.getPeriodicTimestampsArgsForCall)]
	fake.getPeriodicTimestampsArgsForCall = append(fake.getPeriodicTimestampsArgsForCall, struct {
		arg1 domain.PeriodicTask
	}{arg1})
	stub := fake.GetPeriodicTimestampsStub
	fakeReturns := fake.getPeriodicTimestampsReturns
	fake.recordInvocation("GetPeriodicTimestamps", []interface{}{arg1})
	fake.getPeriodicTimestampsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePeriodicTaskService) GetPeriodicTimestampsCallCount() int {
	fake.getPeriodicTimestampsMutex.RLock()
	defer fake.getPeriodicTimestampsMutex.RUnlock()
	return len(fake.getPeriodicTimestampsArgsForCall)
}

func (fake *FakePeriodicTaskService) GetPeriodicTimestampsCalls(stub func(domain.PeriodicTask) ([]string, error)) {
	fake.getPeriodicTimestampsMutex.Lock()
	defer fake.getPeriodicTimestampsMutex.Unlock()
	fake.GetPeriodicTimestampsStub = stub
}

func (fake *FakePeriodicTaskService) GetPeriodicTimestampsArgsForCall(i int) domain.PeriodicTask {
	fake.getPeriodicTimestampsMutex.RLock()
	defer fake.getPeriodicTimestampsMutex.RUnlock()
	argsForCall := fake.getPeriodicTimestampsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePeriodicTaskService) GetPeriodicTimestampsReturns(result1 []string, result2 error) {
	fake.getPeriodicTimestampsMutex.Lock()
	defer fake.getPeriodicTimestampsMutex.Unlock()
	fake.GetPeriodicTimestampsStub = nil
	fake.getPeriodicTimestampsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePeriodicTaskService) GetPeriodicTimestampsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getPeriodicTimestampsMutex.Lock()
	defer fake.getPeriodicTimestampsMutex.Unlock()
	fake.GetPeriodicTimestampsStub = nil
	if fake.getPeriodicTimestampsReturnsOnCall == nil {
		fake.getPeriodicTimestampsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getPeriodicTimestampsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakePeriodicTaskService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPeriodicTimestampsMutex.RLock()
	defer fake.getPeriodicTimestampsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePeriodicTaskService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.PeriodicTaskService = new(FakePeriodicTaskService)
